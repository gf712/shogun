File f_feats_train = csv_file("../../data/classifier_binary_2d_nonlinear_features_train.dat")
File f_feats_test = csv_file("../../data/classifier_binary_2d_nonlinear_features_test.dat")
File f_labels_train = csv_file("../../data/classifier_binary_2d_nonlinear_labels_train.dat")
File f_labels_test = csv_file("../../data/classifier_binary_2d_nonlinear_labels_test.dat")

#![create_features]
Features features_train = features(f_feats_train)
Features features_test = features(f_feats_test)
Labels labels_train = labels(f_labels_train)
Labels labels_test = labels(f_labels_test)
#![create_features]

#![create_kernel]
Kernel k1 = kernel("GaussianKernel")
Kernel k2 = kernel("PolyKernel")
#![create_kernel]

#![create_machine]
Machine svm = machine("LibSVM", epsilon=0.001)
#![create_machine]

#![evaluation_criteria]
SplittingStrategy splitting = splitting_strategy("CrossValidationSplitting", num_subsets=4)
Evaluation evaluation_criterion = evaluation("AccuracyMeasure")
#![evaluation_criteria]

#![create_master_node]
GridSearch node = new GridSearch(svm, splitting, evaluation_criterion)
RealVector c1_param([0.1, 1.0, 10.0])
RealVector c2_param([0.1, 1.0, 10.0])
node.attach("C1", c1_param)
node.attach("C2", c2_param)
#![create_master_node]

#![create_child_nodes]
GridParameters k1_node = new GridParameters(k1)
GridParameters k2_node = new GridParameters(k2)
#![create_child_nodes]

#![attach_child_nodes]
IntVector degree_param([1, 2, 3])
k2_node.attach("degree", degree_param)
node.attach("kernel", k1_node)
RealVector width_param([0.1, 1.0, 2.0])
node.attach("kernel::log_width", width_param)
node.attach("kernel", k2_node)
#![attach_child_nodes]

#![train_and_apply]
Machine best_model = as_machine(node.train(features_train, labels_train, True))
best_model.put("labels", labels_train)
best_model.train(features_train)
Labels labels_predict = best_model.apply(features_test)
#![train_and_apply]

#![evaluate_and_get_result]
real acc = evaluation_criterion.evaluate(labels_predict, labels_test)
RealVector output = labels_test.get_real_vector("labels")
#![evaluate_and_get_result]